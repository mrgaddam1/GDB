@page "/orders/update/{orderId:int}"
@using System.ComponentModel.DataAnnotations
@using Blazorise
@using Blazorise.Components
@using GDB.Web.BLL.Interface
@using GDB.Web.Client.Infrastructure.Utilis.Orders
@using GDB.Web.Shared

@inject ICustomerService CustomerService
@inject IOrdersTypeService OrdersTypeService
@inject IStaterService StaterService
@inject IOrderService OrderService
@inject IPaymentTypeService PaymentTypeService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILogger<Add> Logger
@rendermode @(new InteractiveAutoRenderMode(prerender:false))

<div class="container">
    <div class="row">
        <div class="col-md-10 mx-auto">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    Update Orders
                </div>
                <div class="card-body">
                    <div class="col-lg-12">
                        <EditForm Model="@order" FormName="UpdateOrderForm" OnValidSubmit="UpdateOrder">
                            @if (errorMessages != null)
                            {
                                @foreach (var message in errorMessages)
                                {
                                    if (!string.IsNullOrEmpty(message))
                                    {
                                        <ul class="alert alert-danger mt-3 text-left">
                                            <li>@message</li>
                                        </ul>
                                    }
                                }
                            }

                            <div class="row rowMargin">
                                <div class="col-md-2">
                                    First Name
                                </div>
                                <div class="col-md-4">
                                    <InputText @bind-Value="order.FirstName" readonly class="form-control" />
                                </div>
                                <div class="col-md-2">
                                    Last Name
                                </div>
                                <div class="col-md-4">
                                    <InputText @bind-Value="order.LastName" readonly class="form-control" />
                                </div>
                            </div>

                            <div class="row rowMargin">

                                @if ((order.StaterId != 0) || (order.StaterId != null))
                                {
                                    <div class="col-md-2">
                                        Any Staters?
                                    </div>
                                    <div class="col-md-4">
                                        <InputText @bind-Value="order.StarterDescription" readonly class="form-control" />
                                    </div>

                                    <div class="col-md-2">
                                        Total Stater Price
                                    </div>
                                    <div class="col-md-4">
                                        <InputNumber @bind-Value="order.SelectedStaterPrice" readonly class="form-control text-danger" />
                                    </div>
                                }
                            </div>


                            <div class="row rowMargin">
                                <div class="col-md-2">
                                    Mobile Number
                                </div>
                                <div class="col-md-4">
                                    <InputText @bind-Value="order.MobileNumber" readonly class="form-control" />
                                </div>
                                <div class="col-md-2">
                                    Order Types
                                </div>
                                <div class="col-md-4">
                                    <InputText @bind-Value="order.OrderTypeName" readonly class="form-control" />
                                </div>

                            </div>

                            <div class="row rowMargin">
                                <div class="col-md-2">
                                    Order Date
                                </div>
                                <div class="col-md-4">
                                    <InputDate @bind-Value="order.OrderDate" readonly class="form-control" />
                                </div>
                                <div class="col-md-2">
                                    Amount
                                </div>
                                <div class="col-md-4">
                                    <InputNumber @bind-Value="order.Amount" readonly class="form-control text-danger" />
                                </div>
                            </div>

                            <div class="row rowMargin">
                                <div class="col-md-2">
                                    Quantity
                                </div>
                                <div class="col-md-4">
                                    <InputNumber @bind-Value="order.Quantity" readonly class="form-control text-danger" />
                                </div>

                                <div class="col-md-2">
                                    Total Amount
                                </div>
                                <div class="col-md-4">
                                    <InputNumber @bind-Value="order.Amount" readonly class="form-control text-danger" />
                                </div>
                            </div>

                            <div class="row rowMargin">
                                <div class="col-md-2">
                                    Amount Paid or not?
                                </div>
                                <div class="col-md-4">
                                    <InputCheckbox @bind-Value="checkAmountPaidOrNot" class="form-check-input" />
                                    <label class="form-check-label">
                                        @(order.AmountPaid ?? false)
                                    </label>
                                </div>
                                <div class="col-md-2">
                                    Payment Type
                                </div>                               
                                <div class="col-md-4">
                                    <select style="width:250px;font-size:13px;"
                                            @onchange="OnPaymentTypeSelectionIndexChanged"
                                            disabled="@(!checkAmountPaidOrNot)"
                                            id="ddlPaymentType"
                                            name="OrderItem"
                                            class="form-select"
                                            >
                                        <option>@PaymentTypeInitialText</option>
                                       @if (paymentTypeViewModel != null)
                                        {
                                            @foreach (var item in paymentTypeViewModel)
                                            {
                                                <option value="@item.PaymentTypeId">@item.PaymentTypeDescription</option>
                                            }
                                        }
                                    </select>
                                </div>

                            </div>

                            <div class="row rowMargin">
                                <div class="col-md-2">
                                    Amount Paid Date
                                </div>
                                <div class="col-md-4">
                                    <InputDate @bind-Value="order.AmountPaidDate" 
                                    disabled="@(!checkAmountPaidOrNot)" 
                                    class="form-control" />
                                </div>
                                <div class="col-md-2">
                                    &nbsp;
                                </div>
                                <div class="col-md-4">
                                    &nbsp;
                                </div>
                            </div>
                             
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary fw-bold">
                                    <i class="fas fa-save" aria-hidden="true"></i>
                                    &nbsp;&nbsp;Update Order</button>
                                <button type="button"class="btn btn-warning fw-bold" @onclick="GoBack">
                                    <i class="fas fa-times"></i>&nbsp;&nbsp;Cancel</button>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success mt-3 text-center">@successMessage</div>
                            }

                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int orderId { get; set; }
    private OrdersViewModel order = new();
    string selectedDropValue { get; set; } = "";

    public string PaymentTypeInitialText { get; set; } = "---Select Payment Type---";
    public IEnumerable<PaymentTypeViewModel> paymentTypeViewModel;

    private bool checkAmountPaidOrNot
    {
        get => order.AmountPaid ?? false; // Default to false if null
        set => order.AmountPaid = value;  // Update original property
    }

    private EditContext editContext;
    private string[] errorMessages;
    private string successMessage = string.Empty;
    private int selectedCustomerId { get; set; }
    private string selectedStaters { get; set; }
    private string selectedOrderType { get; set; }

    public List<OrdersViewModel> ordersViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ordersViewModel = await OrderService.GetAllOrders<List<OrdersViewModel>>();
        order = ordersViewModel.ToList().Find(x => x.OrderId == orderId);
     
        paymentTypeViewModel = await PaymentTypeService.GetAllPaymentTypes<List<PaymentTypeViewModel>>();
    }

    private async void UpdateOrder()
    {
        successMessage = "";
        order.Amount = order.TotalPrice;
        errorMessages = Validations(order);
        string validations = string.Join(" ", errorMessages);
        if ((validations == null) || (validations == ""))
        {
            var response = await OrderService.Update(order);
            if (response.Value)
            {
                Success();
            }
            else
            {
                Error();
            }
        }
        else
        {
            OnInitializedAsync();            
        }
    }
    private void Success()
    {
        Logger.LogInformation(OrderUtils.Order_Update_SuccessMessage);
        successMessage = OrderUtils.Order_Update_SuccessMessage;
        Reset();
        NavigationManager.NavigateTo("/orders/ordersList");
    }
    private void Error()
    {
        Logger.LogInformation(OrderUtils.Order_Update_ErrorMessage);
        successMessage = OrderUtils.Order_Update_ErrorMessage;               
    }

    private async void Reset()
    {
        order = new OrdersViewModel();
        StateHasChanged();
    }
    private async Task OnPaymentTypeSelectionIndexChanged(ChangeEventArgs e)
    {
        order.PaymentTypeId = Convert.ToInt32(e.Value.ToString());
        StateHasChanged();
    }

    private string[] Validations(OrdersViewModel ordersViewModel)
    {
        string[] result;
        string validationMessage = "";

        if ((ordersViewModel.PaymentTypeId == 0) || (ordersViewModel.PaymentTypeId == null))
        {
            validationMessage = OrderUtils.Order_Update_PaymentType_ValidationMessage;
        }
        if ((ordersViewModel.AmountPaid == false) || (ordersViewModel.AmountPaid == null))
        {
            validationMessage = validationMessage != null ? validationMessage +
                                ", " + Environment.NewLine + OrderUtils.Order_Update_AmountPaidOrNot_ValidationMessage
                                : OrderUtils.Order_Update_AmountPaidOrNot_ValidationMessage;
        }
        if (ordersViewModel.AmountPaidDate == null)
        {
            validationMessage = validationMessage != null
                                ? validationMessage + ", " + Environment.NewLine +
                                 OrderUtils.Order_Update_AmountPaidDate_ValidationMessage
                                : OrderUtils.Order_Update_AmountPaidDate_ValidationMessage;
        }
        return result = validationMessage.Split(',').Select(s => s.Trim()).ToArray();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/orders/ordersList");
    }

}
