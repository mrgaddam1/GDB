@page "/orders/ordersList" 
@using GDB.Web.BLL.Interface
@using GDB.Web.Shared
@using System.Globalization
@using Radzen.Blazor

@inject IOrderService OrderService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false)) 


<div class="row">
    <div class="col-lg-6" align="left">
        <h2>Orders</h2>
    </div>
    <div class="col-lg-6" align="right">
        <button @onclick="AddNewOrder" class="btn btn-primary">
            <i class="fa fa-plus" aria-hidden="true"></i>
            &nbsp;&nbsp;Add Order
        </button>
    </div>
</div>
<div class="row">
    @if (ordersViewModel != null)
    {
        <RadzenDataGrid class="radzen-grid radgen-grid-font"
                        Data="@ordersViewModel"
                        TItem="OrdersViewModel"
                        EditMode="Radzen.DataGridEditMode.Single"
                        AllowFiltering="true"
                        AllowPaging="true"
                        AllowSorting="true"
                        PageSize="15"
                        GridLines="@GridLines">
            <Columns>
                <RadzenDataGridColumn Property="OrderId" Title="Id" Width="100" Visible="false" />
                <RadzenDataGridColumn Property="WeekId" Title="Week" Width="80px" />
                <RadzenDataGridColumn Property="MobileNumber" Title="Mobile Number" Width="110px" />
                <RadzenDataGridColumn Property="Location" Title="Location" Width="120px" />
                <RadzenDataGridColumn Property="AdvertisementDescription" Title="How did hear?" Width="170px" />
                <RadzenDataGridColumn Property="OrderTypeName" Title="OrderType Name" Width="140px" />

                <RadzenDataGridColumn Property="OrderDate" Title="Order Date" Width="100px" >
                    <Template Context="data">
                        @data.OrderDate.Value.ToString("dd/MM/yyyy")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="Quantity" Title="Quantity" Width="100px" />
                <RadzenDataGridColumn Property="AmountPaid" Title="Amount Paid" Width="120px" />
                <RadzenDataGridColumn Property="Amount" Title="Amount" Width="100px" >
                    <Template Context="data">
                        <span style="color:green;font-weight:bold;">
                            @data.Amount.Value.ToString("C", CultureInfo.CreateSpecificCulture("en-GB"))
                        </span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="AmountPaidDate" Title="Paid Date" Width="110px"  >
                    <Template Context="data">
                        @data.OrderDate.Value.ToString("dd/MM/yyyy")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="PaymentType" Title="Payment Type" Width="120px" />                 

                <RadzenDataGridColumn TItem="OrdersViewModel" Width="120px">
                    <Template Context="data">
                        <RadzenButton ButtonType="Radzen.ButtonType.Button"
                                      Icon="edit" Size="Radzen.ButtonSize.Small"
                                      Style="margin-right:5px;"
                                      Click="@(() => EditRow(data))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div> 

@code {
    public List<OrdersViewModel> ordersViewModel{ get; set; }
    public int currentWeekId { get; set; }
    Radzen.DataGridGridLines GridLines = Radzen.DataGridGridLines.Both;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ordersViewModel = new List<OrdersViewModel>();
            ordersViewModel = await OrderService.GetAllOrders<List<OrdersViewModel>>();
            currentWeekId = await OrderService.GetMaxWeekId<int>();

        }
        catch(Exception ex)
        {
            string errorMessage = ex.Message;
        }     
    }
    void EditRow(OrdersViewModel ordersViewModel)
    {
        NavigationManager.NavigateTo("/orders/update" + "/" + Convert.ToString(ordersViewModel.OrderId));
    }

    private void AddNewOrder()
    {
        NavigationManager.NavigateTo("/orders/add");
    }   
    // private void UpdateOrder()
    // {
    //     NavigationManager.NavigateTo("/orders/update" + "/" + Convert.ToString(ordersViewModel.FirstOrDefault().OrderId));
    // }    
}
<style type="text/css">
 .gridItemColor{
     color:red;
 }

    .green-text {
        color: green;
        font-weight: bold;
    }

    .red-text {
        color: red;
        font-weight: bold;
    }
</style>
