@page "/inventory/inventory/update/{inventoryId:int}"
@using GDB.Web.BLL.Interface
@using GDB.Web.Shared
@using GDB.Web.Shared.Inventory
@inject IInventoryService InventoryService
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject ILogger<Add> Logger
@rendermode @(new InteractiveAutoRenderMode(prerender:false))

<div class="container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    Update Inventory
                </div>
                <div class="card-body">
                    <div class="col-lg-12">
                        <EditForm Model="@inventoryViewModel" OnValidSubmit="HandleValidSubmit">
                            @if (errorMessages != null)
                            {
                                @foreach (var message in errorMessages)
                                {
                                    if (!string.IsNullOrEmpty(message))
                                    {
                                        <ul class="alert alert-danger mt-3 text-left">
                                            <li>@message</li>
                                        </ul>
                                    }
                                }
                            }
                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Product
                                </div>
                                <div class="col-sm-6">                                  
                                    <InputText @bind-Value="inventoryViewModel.ProductName" readonly class="form-control" />
                                </div>
                            </div>
                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Quantity
                                </div>
                                <div class="col-sm-6">
                                    <InputNumber @bind-Value="inventoryViewModel.Quantity" style="color:red;" class="form-control" />
                                </div>
                            </div>

                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Available Quantity
                                </div>
                                <div class="col-sm-6">
                                    <InputNumber @bind-Value="inventoryViewModel.AvailableQuantity" style="color:red;" class="form-control" />
                                </div>
                            </div>

                            <div class="text-center">
                                <button type="submit" class="btn btn-primary">Submit</button>
                                <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
                            </div>
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success mt-3 text-center">@successMessage</div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public int inventoryId { get; set; }

    private InventoryViewModel inventoryViewModel = new InventoryViewModel();
    private string[] errorMessages;
    private string successMessage = string.Empty;
    public IEnumerable<ProductViewModel> productViewModel;
    private List<InventoryViewModel> inventoriesData { get; set; }
    public string ProductInitialText { get; set; } = "---Select Product---";

    protected override async Task OnInitializedAsync()
    {
        inventoriesData = new List<InventoryViewModel>();
        inventoriesData = await InventoryService.GetAllInventoryStock<List<InventoryViewModel>>();
        inventoryViewModel = inventoriesData.FirstOrDefault(i => i.InventoryId == inventoryId);

    }   

    private async void HandleValidSubmit()
    {
        errorMessages = Validations(inventoryViewModel);
        string validations = string.Join(" ", errorMessages);
        if ((validations == null) || (validations == ""))
        {
            inventoryViewModel.WeekId = 0;
            var response = await InventoryService.Update(inventoryViewModel);
            if (response.Value)
            {
                Logger.LogInformation("Inventory details are updated successfully.");
                successMessage = "Inventory details updated successfully!";
                Reset();
            }
            else
            {
                Logger.LogInformation("Unable to updated Inventory.");
                successMessage = "Unable to updated Inventory.";
            }
        }
        else
        {
            validations = "";
        }
    }

    private async void Reset()
    {
        inventoryViewModel = new InventoryViewModel();
        errorMessages = [];
        StateHasChanged();
    }

    private string[] Validations(InventoryViewModel inventoryViewModel)
    {
        string[] result;
        string validationMessage = "";        
        if ((inventoryViewModel.Quantity == null) || (inventoryViewModel.Quantity == 0))
        {
            validationMessage = validationMessage != null ? validationMessage +
                                ", " + Environment.NewLine + "Quantity: Please enter Quantity"
                                : "Quantity: Please enter Quantity";
        }
        if ((inventoryViewModel.AvailableQuantity == null) || (inventoryViewModel.AvailableQuantity == 0))
        {
            validationMessage = validationMessage != null
                                ? validationMessage + ", " + Environment.NewLine + "AvailableQuantity: Please enter AvailableQuantity"
                                : "AvailableQuantity: Please enter AvailableQuantity";
        }
        if ((inventoryViewModel.AvailableQuantity > inventoryViewModel.Quantity))
        {
            validationMessage = validationMessage != null
                                ? validationMessage + ", " + Environment.NewLine + "AvailableQuantity: AvailableQuantity should be less than Quantity"
                                : "AvailableQuantity: AvailableQuantity should be less than Quantity";
        }
        return result = validationMessage.Split(',').Select(s => s.Trim()).ToArray();
    }
    private void GoBack()
    {
        NavigationManager.NavigateTo("/inventory/inventory/list");
    }

}
